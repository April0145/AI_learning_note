{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyMA8bLzGhkSaBviXGwt4aHQ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Scikit-learn使用"],"metadata":{"id":"pJLizba3AqKs"}},{"cell_type":"markdown","source":["### 1，导入数据"],"metadata":{"id":"jA9VW9uhDFcJ"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"tNZpen1hAodU"},"outputs":[],"source":["from sklearn.datasets import load_iris\n","\n","# 加载 Iris 数据集\n","data = load_iris()\n","X = data.data  # 特征\n","y = data.target  # 目标值"]},{"cell_type":"markdown","source":["### 2，数据拆分"],"metadata":{"id":"fo0qSENNDQ0X"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","# 将数据集拆分为 80% 训练数据和 20% 测试数据\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"],"metadata":{"id":"qt_3Hz6lApzY"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3， 数据预处理"],"metadata":{"id":"lRo63N0yDjqM"}},{"cell_type":"code","source":["# 标准化数据\n","from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","X_scaled = scaler.fit_transform(X)\n","\n","# 归一化数据\n","from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","X_scaled = scaler.fit_transform(X)\n"],"metadata":{"id":"f0kVi4yaEZcl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 4, 选择模型并训练"],"metadata":{"id":"MCkk4h3IFmce"}},{"cell_type":"code","source":["# 逻辑回归\n","from sklearn.linear_model import LogisticRegression\n","model = LogisticRegression(penalty='l2',C=1.0) #L2正则化强度1.0\n","model.fit(X_train, y_train)\n","\n","# 线性回归\n","from sklearn.linear_model import LinearRegression\n","model = LinearRegression()\n","model.fit(X_train, y_train)"],"metadata":{"id":"BpfoV1pFFl9m"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 5， 模型预测和评估"],"metadata":{"id":"kwHQwa1rGzai"}},{"cell_type":"code","source":["# 模型预测\n","y_pred = model.predict(X_test)\n","\n","# 模型评估\n","from sklearn.metrics import accuracy_score\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f\"Accuracy: {accuracy * 100:.2f}%\")"],"metadata":{"id":"f6GK5lkzG3Ra"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# sklearn中的模块"],"metadata":{"id":"I92t0uT0If4f"}},{"cell_type":"markdown","source":["### 1，datasets模块：加载数据集"],"metadata":{"id":"vDBPvrE7IofU"}},{"cell_type":"code","source":["from sklearn.datasets import load_iris\n","\n","iris = load_iris()\n","\n","X = iris.data\n","y = iris.target\n","\n","\"\"\"\n","load_iris()：加载鸢尾花数据集。\n","load_digits()：加载手写数字数据集。\n","load_wine()：加载葡萄酒数据集。\n","load_boston()：加载波士顿房价数据集（已废弃，因隐私问题）。\n","load_diabetes()：加载糖尿病数据集。\n","load_linnerud()：加载Linnerud数据集（体能训练数据）。\n","\"\"\""],"metadata":{"id":"UJBniiBeInYE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 2,model_selection模块：划分训练集和测试集"],"metadata":{"id":"5s3KdSr2WBaQ"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_spli\n","\n","# 将数据集划分为训练集和测试集（70% 训练集，30% 测试集）\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"],"metadata":{"id":"-IJ66DVsWbGV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 3，preprocessing模块：标准化和独热编码"],"metadata":{"id":"Ksomj4caWylv"}},{"cell_type":"code","source":["X = np.array([[1, 2], [3, 4], [5, 6]])\n","\n","from sklearn.preprocessing import StandardScaler,MinMaxScaler\n","\n","# 创建 StandardScaler 对象\n","scaler = StandardScaler() # 标准化\n","\n","# 创建 MinMaxScaler 对象\n","scaler = MinMaxScaler() # 归一化\n","\n","# 拟合并转换数据\n","X_scaled = scaler.fit_transform(X)"],"metadata":{"id":"4sO_yzm4XBDE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["categories = np.array([['cat'], ['dog'], ['dog'], ['fish']])\n","\n","from sklearn.preprocessing import OneHotEncoder\n","\n","# 创建 OneHotEncoder对象\n","encoder = OneHotEncoder(sparse=False)  # 参数：输出密集矩阵（numpy数组）\n","\n","# 对数据进行编码\n","encoded_data = encoder.fit_transform(categories)"],"metadata":{"id":"fEZrTQ62Xphq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 4，linear_model模块：提供线性模型"],"metadata":{"id":"2FBlo1yYaXeA"}},{"cell_type":"code","source":["# 逻辑回归\n","from sklearn.linear_model import LogisticRegression\n","model = LogisticRegression(penalty='l2',C=1.0) #L2正则化，强度1.0\n","model.fit(X_train, y_train)\n","\n","# 线性回归\n","from sklearn.linear_model import LinearRegression\n","model = LinearRegression()\n","model.fit(X_train, y_train)"],"metadata":{"id":"U5IC5ikkajQu"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 5，metrics：计算模型的准确性、精度、召回率、F1 分数、均方误差"],"metadata":{"id":"My5YZNHIbi4c"}},{"cell_type":"code","source":["from sklearn.metrics import accuracy_score # 准确率\n","\n","y_true = [0, 1, 2, 2, 0, 1]\n","y_pred = [0, 1, 2, 1, 0, 2]\n","\n","accuracy = accuracy_score(y_true, y_pred)\n","\n","from sklearn.metrics import recall_score # 召回率\n","\n","y_true = [0, 1, 1, 0, 1, 1]\n","y_pred = [0, 1, 1, 0, 0, 1]\n","\n","recall = recall_score(y_true, y_pred)\n","\n","from sklearn.metrics import f1_score # F1召回分数\n","\n","y_true = [0, 1, 1, 0, 1, 1]\n","y_pred = [0, 1, 1, 0, 0, 1]\n","\n","f1 = f1_score(y_true, y_pred)"],"metadata":{"id":"v07IFEuMbrHM"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 6，KMeans：实现K-Means聚类"],"metadata":{"id":"BHHhR-rH_rH9"}},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","\n","# 创建 KMeans对象，指定簇的数量\n","kmeans = KMeans(n_clusters=4)\n","kmeans.fit(X)\n","\n","# 获取聚类的中心和每个点的标签\n","centers = kmeans.cluster_centers_\n","labels = kmeans.labels_\n","\n","y_pred = kmeans.predict(X_test)"],"metadata":{"id":"L7MS2W4D_5WQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### 7，tree模块：用于构建决策树"],"metadata":{"id":"_9595R2uB0mh"}},{"cell_type":"code","source":["from sklearn.tree import DecisionTreeClassifier  # 决策树分类器\n","\n","clf = DecisionTreeClassifier(max_depth=3, min_samples_split=4, criterion='entropy', random_state=42)\n","# （最大深度，节点划分的最小数据量，划分标准：信息增益，设置随机数种子）\n","clf.fit(X_train, y_train)\n","\n","\n","from sklearn.tree import DecisionTreeRegressor # 回归树\n","regressor = DecisionTreeRegressor(criterion='mse',random_state=42) # 划分标准改为mse(均方误差)，其它和上面一样\n","regressor.fit(X_train, y_train)"],"metadata":{"id":"HCmWECy1Bz4y"},"execution_count":null,"outputs":[]}]}